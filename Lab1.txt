----------------------------------------------------------------------------------------
-------------------------------------- DELETE ALL --------------------------------------
----------------------------------------------------------------------------------------
/*
\set QUIET true
SET client_min_messages TO WARNING;
DROP SCHEMA public CASCADE;
CREATE SCHEMA public;
GRANT ALL ON SCHEMA public TO postgres;
SET client_min_messages TO NOTICE;
\set QUIET false
*/


----------------------------------------------------------------------------------------
---------------------------------------- PART 1 ----------------------------------------
----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------
-------------------------------------- DATABASES ---------------------------------------
----------------------------------------------------------------------------------------

CREATE TABLE Students(
	idnr CHAR(10) NOT NULL,
	name TEXT NOT NULL,
	login TEXT NOT NULL, --os채ker p책 typ h채r
	program TEXT NOT NULL,
	PRIMARY KEY(idnr)
	);

CREATE TABLE Branches(
	name TEXT NOT NULL,
	program TEXT NOT NULL,
	PRIMARY KEY(name, program)
	);

CREATE TABLE Courses(
	code CHAR(6) NOT NULL,
	name TEXT NOT NULL,
	credits DECIMAL(3,1) NOT NULL, --3 nummer, 1 decimal
	department TEXT NOT NULL,
	PRIMARY KEY(code)
	);

CREATE TABLE LimitedCourses(
	code CHAR(6) NOT NULL,
	capacity INT, --not all courses have restriction on capacity
	PRIMARY KEY(code),
	FOREIGN KEY (code) REFERENCES Courses
	);

CREATE TABLE StudentBranches(
	student CHAR(10) NOT NULL,
	branch TEXT NOT NULL,
	program TEXT NOT NULL,
	PRIMARY KEY(student),
	FOREIGN KEY (student) REFERENCES Students,
	FOREIGN KEY (branch, program) REFERENCES Branches
	);

CREATE TABLE Classifications(
	name TEXT NOT NULL,
	PRIMARY KEY(name)
	);

CREATE TABLE Classified(
	course CHAR(6) NOT NULL,
	classification TEXT NOT NULL,
	PRIMARY KEY(course, classification),
	FOREIGN KEY (course) REFERENCES Courses,
	FOREIGN KEY (classification) REFERENCES Classifications
	); --classification does not need to exist or be unique

CREATE TABLE MandatoryProgram(
	course CHAR(6) NOT NULL,
	classification TEXT NOT NULL,
	PRIMARY KEY (course, classification),
	FOREIGN KEY (course) REFERENCES Courses
	);

CREATE TABLE MandatoryBranch(
	course CHAR(6) NOT NULL,
	branch TEXT NOT NULL,
	program TEXT NOT NULL,
	PRIMARY KEY (course, branch, program),
	FOREIGN KEY (course) REFERENCES Courses,
	FOREIGN KEY (branch, program) REFERENCES Branches
	);

CREATE TABLE RecommendedBranch(
	course CHAR(6) NOT NULL,
	branch TEXT NOT NULL,
	program TEXT NOT NULL,
	PRIMARY KEY (course, branch, program),
	FOREIGN KEY (course) REFERENCES Courses,
	FOREIGN KEY (branch, program) REFERENCES Branches
	);

CREATE TABLE Registered(
	student CHAR(10) NOT NULL,
	course CHAR(6) NOT NULL,
	PRIMARY KEY (student, course),
	FOREIGN KEY (student) REFERENCES Students,
	FOREIGN KEY (course) REFERENCES Courses
	);

CREATE TABLE Taken(
	student CHAR(10) NOT NULL,
	course CHAR(6) NOT NULL,
	grade CHAR(1) NOT NULL CHECK (grade IN ('U', '3', '4', '5')),
	PRIMARY KEY (student, course),
	FOREIGN KEY (student) REFERENCES Students,
	FOREIGN KEY (course) REFERENCES Courses
	);

CREATE TABLE WaitingList(
	student CHAR(10) NOT NULL,
	course CHAR(6) NOT NULL,
	position SERIAL,
	PRIMARY KEY (student, course),
	FOREIGN KEY (student) REFERENCES Students,
	FOREIGN KEY (course) REFERENCES Courses
	);


----------------------------------------------------------------------------------------
---------------------------------------- VIEWS -----------------------------------------
----------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW BasicInformation AS(
	SELECT idnr, name, login, Students.program, COALESCE(branch,'') AS branch
	FROM Students
	FULL JOIN StudentBranches
	ON (Students.idnr = StudentBranches.student)
	);

CREATE OR REPLACE VIEW FinishedCourses AS(
	SELECT student, course, grade, credits
	FROM Taken
	JOIN Courses
	ON (Taken.course = Courses.code)
	);

CREATE OR REPLACE VIEW FinishedCourses AS(
	SELECT student, course, credits
	FROM Taken
	JOIN Courses
	ON (Taken.course = Courses.code)
	WHERE grade NOT IN ('U')
	);

CREATE OR REPLACE VIEW Registrations AS(
	(SELECT student, course, 'waiting' as status FROM WaitingList)
	UNION
	(SELECT student, course, 'registered' as status FROM Registered)
	);






/*

______________________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________________


-- TOTAL CREDITS
	SELECT student, SUM(credits) as totalCredits
	FROM passedcourses
	GROUP BY student

-- MANDATORY LEFT
	SELECT student, course
	FROM unreadmandatory

-- MATH CREDITS
	SELECT student, SUM(credits) AS mathCredits --, PassedCourses.course, classification
	FROM PassedCourses
	LEFT OUTER JOIN Classified
	ON PassedCourses.course = Classified.course
	WHERE classification = 'math'
	GROUP BY student, PassedCourses.course, Classified.course, Classified.classification

-- RESEARCH CREDITS
	SELECT student, SUM(credits) AS researchCredits --, PassedCourses.course, classification
	FROM PassedCourses
	LEFT OUTER JOIN Classified
	ON PassedCourses.course = Classified.course
	WHERE classification = 'research'
	GROUP BY student, PassedCourses.course, Classified.course, Classified.classification

-- NUMER OF PASSED SEMINAR COURSES
	SELECT student, COUNT(classification) AS seminarCourses
	FROM Classified
	JOIN PassedCourses
	ON Classified.course = PassedCourses.course
	WHERE classification = 'seminar'
	GROUP BY student

-- QUALIFIED FOR GRADUATION
	
	
---------------------------------------------------------------------------------
--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!--
------------------------------------ TODO ---------------------------------------
-- qualified: whether or not they qualify for graduation

-- QUALIFIED (boolean)

-- start from studentbranches. A student cannot graduate without having chosen a branch

/*
Requirements for graduation:
	- Passed (grade >= 3) in all mandatory courses of respective program
	- Passed (grade >= 3) in all mandatory courses of respective branch
	- Passed >= 10 credits of courses among the recommended courses for the branch
	- Passed >= 20 credits of maths courses
	- Passed >= 10 credits of research courses
	- Passed >= 1 seminar course
*/

SELECT student, qualified
FROM

--Kom ih책g att kolla detta mot passedCourses
SELECT student, StudentBranches.branch, StudentBranches.program, MandatoryProgram.course AS mandatoryProgram, MandatoryBranch.course AS mandatoryBranch
FROM StudentBranches
FULL JOIN MandatoryBranch
ON StudentBranches.branch = MandatoryBranch.branch
FULL JOIN MandatoryProgram
ON StudentBranches.program = MandatoryProgram.program
ORDER BY student

______________________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________________
*/






